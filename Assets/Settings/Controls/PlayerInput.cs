//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Controls/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Planet_IO
{
    public partial class @PlayerInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Mouse"",
            ""id"": ""741670f8-08ff-45ee-8960-217f8e932281"",
            ""actions"": [
                {
                    ""name"": ""MoveMouse"",
                    ""type"": ""Value"",
                    ""id"": ""617d8cf2-0b51-4078-871f-6db49413b9b1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b832e9e8-fdb4-4c0d-83f2-00731fc62226"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Joystick "",
            ""id"": ""b51b55aa-9b0e-43cb-9032-19e0e2eb67a3"",
            ""actions"": [
                {
                    ""name"": ""MoveJoystick "",
                    ""type"": ""Value"",
                    ""id"": ""ada50e81-05fb-4f09-af77-c54582aa3a72"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""75e2cc3d-1fca-4adb-b669-c741cc7f7e42"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveJoystick "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SwitchDevice"",
            ""id"": ""89c954c3-0130-4f61-a754-eb4a7dfd27ae"",
            ""actions"": [
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""ad1ab564-dda5-47e7-b28b-fd709913fa24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07bfd7bf-2665-46fd-87c9-1b8970a286de"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Mouse
            m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
            m_Mouse_MoveMouse = m_Mouse.FindAction("MoveMouse", throwIfNotFound: true);
            // Joystick 
            m_Joystick = asset.FindActionMap("Joystick ", throwIfNotFound: true);
            m_Joystick_MoveJoystick = m_Joystick.FindAction("MoveJoystick ", throwIfNotFound: true);
            // SwitchDevice
            m_SwitchDevice = asset.FindActionMap("SwitchDevice", throwIfNotFound: true);
            m_SwitchDevice_Switch = m_SwitchDevice.FindAction("Switch", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Mouse
        private readonly InputActionMap m_Mouse;
        private IMouseActions m_MouseActionsCallbackInterface;
        private readonly InputAction m_Mouse_MoveMouse;
        public struct MouseActions
        {
            private @PlayerInput m_Wrapper;
            public MouseActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveMouse => m_Wrapper.m_Mouse_MoveMouse;
            public InputActionMap Get() { return m_Wrapper.m_Mouse; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
            public void SetCallbacks(IMouseActions instance)
            {
                if (m_Wrapper.m_MouseActionsCallbackInterface != null)
                {
                    @MoveMouse.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMoveMouse;
                    @MoveMouse.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMoveMouse;
                    @MoveMouse.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMoveMouse;
                }
                m_Wrapper.m_MouseActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveMouse.started += instance.OnMoveMouse;
                    @MoveMouse.performed += instance.OnMoveMouse;
                    @MoveMouse.canceled += instance.OnMoveMouse;
                }
            }
        }
        public MouseActions @Mouse => new MouseActions(this);

        // Joystick 
        private readonly InputActionMap m_Joystick;
        private IJoystickActions m_JoystickActionsCallbackInterface;
        private readonly InputAction m_Joystick_MoveJoystick;
        public struct JoystickActions
        {
            private @PlayerInput m_Wrapper;
            public JoystickActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveJoystick => m_Wrapper.m_Joystick_MoveJoystick;
            public InputActionMap Get() { return m_Wrapper.m_Joystick; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(JoystickActions set) { return set.Get(); }
            public void SetCallbacks(IJoystickActions instance)
            {
                if (m_Wrapper.m_JoystickActionsCallbackInterface != null)
                {
                    @MoveJoystick.started -= m_Wrapper.m_JoystickActionsCallbackInterface.OnMoveJoystick;
                    @MoveJoystick.performed -= m_Wrapper.m_JoystickActionsCallbackInterface.OnMoveJoystick;
                    @MoveJoystick.canceled -= m_Wrapper.m_JoystickActionsCallbackInterface.OnMoveJoystick;
                }
                m_Wrapper.m_JoystickActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveJoystick.started += instance.OnMoveJoystick;
                    @MoveJoystick.performed += instance.OnMoveJoystick;
                    @MoveJoystick.canceled += instance.OnMoveJoystick;
                }
            }
        }
        public JoystickActions @Joystick => new JoystickActions(this);

        // SwitchDevice
        private readonly InputActionMap m_SwitchDevice;
        private ISwitchDeviceActions m_SwitchDeviceActionsCallbackInterface;
        private readonly InputAction m_SwitchDevice_Switch;
        public struct SwitchDeviceActions
        {
            private @PlayerInput m_Wrapper;
            public SwitchDeviceActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Switch => m_Wrapper.m_SwitchDevice_Switch;
            public InputActionMap Get() { return m_Wrapper.m_SwitchDevice; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SwitchDeviceActions set) { return set.Get(); }
            public void SetCallbacks(ISwitchDeviceActions instance)
            {
                if (m_Wrapper.m_SwitchDeviceActionsCallbackInterface != null)
                {
                    @Switch.started -= m_Wrapper.m_SwitchDeviceActionsCallbackInterface.OnSwitch;
                    @Switch.performed -= m_Wrapper.m_SwitchDeviceActionsCallbackInterface.OnSwitch;
                    @Switch.canceled -= m_Wrapper.m_SwitchDeviceActionsCallbackInterface.OnSwitch;
                }
                m_Wrapper.m_SwitchDeviceActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Switch.started += instance.OnSwitch;
                    @Switch.performed += instance.OnSwitch;
                    @Switch.canceled += instance.OnSwitch;
                }
            }
        }
        public SwitchDeviceActions @SwitchDevice => new SwitchDeviceActions(this);
        public interface IMouseActions
        {
            void OnMoveMouse(InputAction.CallbackContext context);
        }
        public interface IJoystickActions
        {
            void OnMoveJoystick(InputAction.CallbackContext context);
        }
        public interface ISwitchDeviceActions
        {
            void OnSwitch(InputAction.CallbackContext context);
        }
    }
}
